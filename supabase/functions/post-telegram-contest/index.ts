
// @ts-ignore This directive suppresses the TypeScript error for the next line if the type definition file is not found locally.
/// <reference types="npm:@supabase/functions-js@2.4.1/src/edge-runtime.d.ts" />

// Declare Deno as a global variable of type 'any' to satisfy TypeScript when Deno types are not fully resolved in the local environment.
declare var Deno: any;

import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient, SupabaseClient } from 'https://esm.sh/@supabase/supabase-js@2';

interface ContestConditionDetails {
  subscribeChannelLink?: string;
  reactToPost?: boolean;
  joinGroupLink?: string;
}
interface ContestDetailsFromClient {
  title: string;
  description: string;
  prize: string;
  imageUrl?: string;
  buttonText?: string; // –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–º)
  // buttonUrl is removed as it's generated by the system
  numberOfWinners?: number;
  endDate?: string; 
  conditions?: ContestConditionDetails;
  targetChannelId?: string; // ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ
}

interface ContestRecordForDB {
    creator_user_id: string; // ID –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å
    telegram_message_id?: number;
    telegram_chat_id?: string;
    title: string;
    description: string;
    prize: string;
    image_url?: string;
    number_of_winners: number;
    end_date: string;
    conditions?: ContestConditionDetails;
    status: 'active' | 'ended' | 'cancelled';
    raw_telegram_response?: any;
    button_text_generated?: string;
    button_url_generated?: string;
}


const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

const formatDisplayDateTime = (isoDateString?: string): string => {
    if (!isoDateString) return '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    try {
        const date = new Date(isoDateString);
        const options: Intl.DateTimeFormatOptions = {
            day: '2-digit', month: '2-digit', year: 'numeric',
            hour: '2-digit', minute: '2-digit', timeZone: 'Europe/Moscow'
        };
        const formatter = new Intl.DateTimeFormat('ru-RU', options);
        const parts = formatter.formatToParts(date);
        let day = '', month = '', year = '', hour = '', minute = '';
        for (const part of parts) {
            if (part.type === 'day') day = part.value;
            else if (part.type === 'month') month = part.value;
            else if (part.type === 'year') year = part.value;
            else if (part.type === 'hour') hour = part.value;
            else if (part.type === 'minute') minute = part.value;
        }
        return `${hour}:${minute} - ${day}.${month}.${year}`;
    } catch (e) {
        console.error("Error formatting date:", e, "Input was:", isoDateString);
        return '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
};

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  let supabaseAdminClient: SupabaseClient | null = null;

  try {
    const supabaseUrl = Deno.env.get('APP_SUPABASE_URL');
    const serviceRoleKey = Deno.env.get('APP_SERVICE_ROLE_KEY'); 
    const telegramBotToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    const defaultTelegramChannelIdFromEnv = Deno.env.get('TELEGRAM_CHANNEL_ID'); 
    const telegramBotUsername = Deno.env.get('TELEGRAM_BOT_USERNAME_CONFIG'); // –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

    if (!supabaseUrl || !serviceRoleKey || !telegramBotToken || !telegramBotUsername) {
      console.error('Missing critical environment variables (Supabase URL/Service Key, Telegram Bot Token/Username).');
      return new Response(JSON.stringify({ error: 'Server configuration error: Missing critical credentials.' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      });
    }
    
    supabaseAdminClient = createClient(supabaseUrl, serviceRoleKey, {
      auth: { autoRefreshToken: false, persistSession: false }
    });

    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      return new Response(JSON.stringify({ error: 'Missing authorization header' }), { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    const token = authHeader.replace('Bearer ', '');
    
    const { data: { user }, error: userError } = await supabaseAdminClient.auth.getUser(token);

    if (userError || !user) {
      console.error('User authentication error:', userError);
      return new Response(JSON.stringify({ error: 'Invalid token or user not authenticated.' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 401,
      });
    }
    // TODO: Add admin check based on ADMIN_USER_VIHT_IDS_CONFIG and ADMIN_USER_EMAILS_CONFIG if needed,
    // or rely on RLS if Supabase client for function calls is not service_role.
    // For now, assuming this function is called by a trusted client (admin panel) or user.id is sufficient.

    const body: ContestDetailsFromClient = await req.json();
    const { title, description, prize, imageUrl, numberOfWinners, endDate, conditions, targetChannelId, buttonText: userSuppliedButtonText } = body;

    const effectiveChannelId = targetChannelId && typeof targetChannelId === 'string' && targetChannelId.trim() !== ''
                                ? targetChannelId.trim()
                                : defaultTelegramChannelIdFromEnv;

    if (!effectiveChannelId) {
      console.error('Target channel ID is not specified and no default channel ID is configured.');
      return new Response(JSON.stringify({ error: 'Channel ID for posting is not configured.' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400,
      });
    }

    if (!title || !description || !prize || !numberOfWinners || !endDate) {
      return new Response(JSON.stringify({ error: 'Title, description, prize, number of winners, and end date are required.' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400,
      });
    }

    // 1. Save contest to DB first to get its ID for the button URL
    const contestDataForDB: Omit<ContestRecordForDB, 'telegram_message_id' | 'telegram_chat_id' | 'raw_telegram_response' | 'button_text_generated' | 'button_url_generated'> & { creator_user_id: string } = {
        creator_user_id: user.id,
        title: title.trim(),
        description: description.trim(),
        prize: prize.trim(),
        image_url: imageUrl?.trim() || undefined,
        number_of_winners: numberOfWinners,
        end_date: new Date(endDate).toISOString(),
        conditions: conditions,
        status: 'active',
    };

    const { data: newContestArray, error: dbInsertError } = await supabaseAdminClient
        .from('contests')
        .insert(contestDataForDB)
        .select()
        .limit(1);

    if (dbInsertError || !newContestArray || newContestArray.length === 0) {
        console.error('Error saving contest to DB:', dbInsertError);
        return new Response(JSON.stringify({ error: `DB error saving contest: ${dbInsertError?.message || 'Failed to insert or retrieve new contest.'}` }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500,
        });
    }
    const newContest = newContestArray[0];
    const newContestId = newContest.id;

    // 2. Prepare Telegram message content
    let text = `üèÜ *${title.trim()}* üèÜ\n\n`;
    text += `${description.trim()}\n\n`;
    text += `üéÅ *–ü—Ä–∏–∑:* ${prize.trim()}\n`;
    text += `üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* ${numberOfWinners}\n`;
    text += `‚è∞ *–û–∫–æ–Ω—á–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:* ${formatDisplayDateTime(endDate)}\n\n`;

    if (conditions && (conditions.subscribeChannelLink || conditions.reactToPost || conditions.joinGroupLink)) {
        text += `*–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:*\n`;
        if (conditions.subscribeChannelLink) {
            let link = conditions.subscribeChannelLink.trim();
            if (!link.startsWith('@') && !link.startsWith('https://t.me/')) link = `https://t.me/${link}`;
            text += `  - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: ${link}\n`;
        }
        if (conditions.reactToPost) text += `  - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç üëç\n`;
        if (conditions.joinGroupLink) {
             let link = conditions.joinGroupLink.trim();
            if (!link.startsWith('@') && !link.startsWith('https://t.me/')) link = `https://t.me/${link}`;
            text += `  - –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É/—á–∞—Ç: ${link}\n`;
        }
        text += `\n`;
    }
    text += `–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! ‚ú®`;

    // 3. Prepare Telegram API payload with generated button
    const generatedButtonText = userSuppliedButtonText?.trim() || '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å';
    const generatedButtonUrl = `https://t.me/${telegramBotUsername}?start=contest_${newContestId}`;

    const telegramPayload: any = {
      chat_id: effectiveChannelId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: generatedButtonText, url: generatedButtonUrl }]]
      }
    };
    
    let telegramApiUrl;
    if (imageUrl) {
        telegramApiUrl = `https://api.telegram.org/bot${telegramBotToken}/sendPhoto`;
        telegramPayload.photo = imageUrl;
        telegramPayload.caption = text;
    } else {
        telegramApiUrl = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`;
        telegramPayload.text = text;
    }

    // 4. Post to Telegram
    const tgResponse = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(telegramPayload),
    });

    const tgResponseData = await tgResponse.json();

    if (!tgResponse.ok || !tgResponseData.ok) {
      console.error(`Telegram API error for channel ${effectiveChannelId}:`, tgResponseData);
      // Attempt to delete the contest from DB if Telegram post failed to keep things clean
      await supabaseAdminClient.from('contests').delete().eq('id', newContestId);
      return new Response(JSON.stringify({ error: `Telegram API error: ${tgResponseData.description || 'Unknown error'}` }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: tgResponse.status,
      });
    }

    // 5. Update contest in DB with Telegram message_id and other generated details
    const updatePayload = {
        telegram_message_id: tgResponseData.result?.message_id,
        telegram_chat_id: tgResponseData.result?.chat?.id.toString(), // Ensure it's a string
        raw_telegram_response: tgResponseData,
        button_text_generated: generatedButtonText,
        button_url_generated: generatedButtonUrl,
    };

    const { error: dbUpdateError } = await supabaseAdminClient
        .from('contests')
        .update(updatePayload)
        .eq('id', newContestId);

    if (dbUpdateError) {
        console.error('Error updating contest with Telegram info:', dbUpdateError);
        // Non-fatal for the user, but log it. Contest is posted, but DB record is partial.
    }

    return new Response(JSON.stringify({ 
        success: true, 
        message: `–ö–æ–Ω–∫—É—Ä—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª ${effectiveChannelId}!`, 
        contestId: newContestId,
        telegramResponse: tgResponseData 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200,
    });

  } catch (error) {
    console.error('Function error:', error);
     if (error instanceof SyntaxError) {
        return new Response(JSON.stringify({ error: 'Invalid JSON in request body.' }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400
        });
    }
    return new Response(JSON.stringify({ error: error.message || 'Internal server error.' }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500,
    });
  }
});

// Example of expected structure from Telegram API (sendPhoto or sendMessage)
// tgResponseData.result.message_id
// tgResponseData.result.chat.id (this is the channel_id)
// tgResponseData.result.chat.title
// tgResponseData.result.date (unix timestamp)
// ... and more
