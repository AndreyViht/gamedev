
import React, { useState, useCallback } from 'react';
import { Box, TextField, Button, Typography, Paper, CircularProgress, Grid, Alert, Checkbox, FormControlLabel, IconButton, Tooltip } from '@mui/material';
import { supabase } from '../../api/clients';
import { GoogleGenAI, GenerateContentResponse } from '@google/genai'; 
import { genAI } from '../../api/clients'; 
import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome'; 


interface ContestConditionDetails {
    subscribeChannelLink?: string;
    reactToPost?: boolean;
    joinGroupLink?: string;
}
interface ContestDetails {
    title: string;
    description: string;
    prize: string;
    imageUrl?: string;
    buttonText?: string; // –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
    // buttonUrl?: string; // –£–¥–∞–ª–µ–Ω–æ, –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π
    numberOfWinners?: number;
    endDate?: string; 
    conditions?: ContestConditionDetails;
}

interface CreateContestFormProps {
    channelId: string;
    telegramUserId: number; 
    onClose: () => void;
    showToast: (message: string, type: 'success' | 'error' | 'info') => void;
}

export const CreateContestForm: React.FC<CreateContestFormProps> = ({ channelId, telegramUserId, onClose, showToast }) => {
    const [contestDetails, setContestDetails] = useState<ContestDetails>({
        title: '',
        description: '',
        prize: '',
        imageUrl: '',
        buttonText: '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', // –¢–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        numberOfWinners: 1,
        endDate: '',
        conditions: {
            subscribeChannelLink: '',
            reactToPost: false,
            joinGroupLink: '',
        }
    });
    const [isLoading, setIsLoading] = useState(false);
    const [isAiGenerating, setIsAiGenerating] = useState(false);
    const [formError, setFormError] = useState<string | null>(null);

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value, type } = event.target;
        if (type === 'number' && name === 'numberOfWinners') {
            const numVal = parseInt(value, 10);
            if (numVal < 1) setContestDetails(prev => ({ ...prev, [name]: 1 }));
            else if (numVal > 100) setContestDetails(prev => ({ ...prev, [name]: 100 }));
            else setContestDetails(prev => ({ ...prev, [name]: numVal || undefined }));
        } else {
            setContestDetails(prev => ({ ...prev, [name]: value }));
        }
        setFormError(null);
    };

    const handleConditionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const { name, checked, value, type } = event.target;
        if (name === "subscribeChannelCheckbox") {
            setContestDetails(prev => ({
                ...prev,
                conditions: {
                    ...prev.conditions,
                    subscribeChannelLink: checked ? (prev.conditions?.subscribeChannelLink || '') : undefined
                }
            }));
        } else if (name === "joinGroupCheckbox") {
             setContestDetails(prev => ({
                ...prev,
                conditions: {
                    ...prev.conditions,
                    joinGroupLink: checked ? (prev.conditions?.joinGroupLink || '') : undefined
                }
            }));
        }
        else {
            setContestDetails(prev => ({
                ...prev,
                conditions: {
                    ...prev.conditions,
                    [name]: type === 'checkbox' ? checked : value,
                }
            }));
        }
    };


    const generateDescriptionWithAI = useCallback(async () => {
        if (!genAI) {
            showToast("–ö–ª–∏–µ–Ω—Ç Gemini AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", "error");
            return;
        }
        if (!contestDetails.title) {
            showToast("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.", "info");
            return;
        }
        setIsAiGenerating(true);
        setFormError(null);
        try {
            const prompt = `–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–Ω—Å–∞—Ö –¥–ª—è Telegram.
–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${contestDetails.title}".

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤—ã–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –ø—Ä–∏–∑—ã–≤–∞—é—â–∏–º –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è:
- –≠–º–æ–¥–∑–∏ (—É–º–µ—Å—Ç–Ω–æ –∏ –ø–æ —Ç–µ–º–µ).
- –•–æ—Ä–æ—à–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –∞–±–∑–∞—Ü–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–π Markdown –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–∞ –ø—Ä–æ–±–µ–ª–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏).
- –≠–Ω—Ç—É–∑–∏–∞–∑–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω.

–í–∞–∂–Ω–æ:
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞, –ø—Ä–∏–∑—ã, –¥–∞—Ç—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ.
- –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π –æ–±—â–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª—é–¥–µ–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ "${contestDetails.title}".
- –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ Telegram (3-5 –∞–±–∑–∞—Ü–µ–≤).
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ "–∫–æ–Ω–∫—É—Ä—Å" –∏–ª–∏ "${contestDetails.title}" —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–≤—É—á–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–Ω–æ –Ω–µ –∫–æ–ø–∏—Ä—É–π –¥–æ—Å–ª–æ–≤–Ω–æ, –±—É–¥—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º!):
"üéâ –≠–π, –¥—Ä—É–∑—å—è! –ì–æ—Ç–æ–≤—ã –∫ —á–µ–º—É-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–º—É? –ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å "${contestDetails.title}"! üöÄ

–í–∞—Å –∂–¥–µ—Ç –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –∫—Ä—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! ‚ú®

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏! üòâ"

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è.`;

            const response: GenerateContentResponse = await genAI.models.generateContent({
                model: "gemini-2.5-flash-preview-04-17", 
                contents: prompt,
            });
            
            setContestDetails(prev => ({ ...prev, description: response.text }));
            showToast("–û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI!", "success");

        } catch (error: any) {
            console.error("AI Description generation error:", error);
            let displayErrorMessage = `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è AI: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`;
            if (error.message && error.message.toLowerCase().includes("region")) {
                 displayErrorMessage = "–í–∫–ª—é—á–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ VPN (–¥–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ)";
            }
            showToast(displayErrorMessage, "error");
            setFormError(displayErrorMessage);
        } finally {
            setIsAiGenerating(false);
        }
    }, [genAI, contestDetails.title, showToast]);


    const handleSubmitContest = async (e: React.FormEvent) => {
        e.preventDefault();
        setFormError(null);
        if (!contestDetails.title || !contestDetails.description || !contestDetails.prize || !contestDetails.numberOfWinners || !contestDetails.endDate) {
            setFormError('–ó–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–∏–∑, –∫–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏.');
            return;
        }
        if (contestDetails.numberOfWinners < 1 || contestDetails.numberOfWinners > 100) {
            setFormError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.');
            return;
        }
        if (new Date(contestDetails.endDate) <= new Date()) {
            setFormError('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.');
            return;
        }
        
        const conditions = contestDetails.conditions || {};
        const subscribeCheckboxChecked = document.querySelector<HTMLInputElement>('input[name="subscribeChannelCheckbox"]')?.checked;
        if (subscribeCheckboxChecked && !conditions.subscribeChannelLink?.trim()) {
            setFormError('–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.');
            return;
        }
        const joinGroupCheckboxChecked = document.querySelector<HTMLInputElement>('input[name="joinGroupCheckbox"]')?.checked;
        if (joinGroupCheckboxChecked && !conditions.joinGroupLink?.trim()) {
            setFormError('–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É.');
            return;
        }
        

        if (!supabase) {
            setFormError('–ö–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
            return;
        }

        setIsLoading(true);
        try {
            const finalConditions: ContestConditionDetails = {};
            if (subscribeCheckboxChecked && conditions.subscribeChannelLink?.trim()) {
                finalConditions.subscribeChannelLink = conditions.subscribeChannelLink.trim();
            }
            if (conditions.reactToPost) {
                finalConditions.reactToPost = true;
            }
            if (joinGroupCheckboxChecked && conditions.joinGroupLink?.trim()) {
                finalConditions.joinGroupLink = conditions.joinGroupLink.trim();
            }

            const payload = {
                ...contestDetails, // buttonText is included here
                conditions: Object.keys(finalConditions).length > 0 ? finalConditions : undefined,
                targetChannelId: channelId,
            };
            // buttonUrl is intentionally omitted from payload as it's generated by backend

            const { data, error: functionError } = await supabase.functions.invoke('post-telegram-contest', {
                body: payload,
            });

            if (functionError) {
                if (functionError.message.includes("Admin privileges required")) {
                     showToast('–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.', 'error');
                     setFormError('–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
                } else {
                    throw functionError;
                }
            } else if (data?.error) { // Application-level error from function logic
                 showToast(`–û—à–∏–±–∫–∞ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏: ${data.error}`, 'error');
                 setFormError(`–û—à–∏–±–∫–∞ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏: ${data.error}`);
            } else if (data?.success) { // Check for explicit success flag from function
                showToast(`–ö–æ–Ω–∫—É—Ä—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!`, 'success');
                onClose();
            }
             else { // Fallback if success flag is missing but no explicit error
                console.warn("Function response did not explicitly state success or error, but no exceptions caught.", data);
                showToast("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª.", "info");
                onClose();
            }
        } catch (err: any) {
            showToast(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞: ${err.message}`, 'error');
            setFormError(`–û—à–∏–±–∫–∞: ${err.message}`);
        } finally {
            setIsLoading(false);
        }
    };
    

    return (
        <Box className="landing-page" sx={{ maxWidth: '800px', mx: 'auto', py: 3 }}>
            <Paper component="form" onSubmit={handleSubmitContest} elevation={3} sx={{ p: { xs: 2, sm: 4 }, borderRadius: 'var(--border-radius-large)' }}>
                <Typography variant="h5" component="h2" gutterBottom sx={{ textAlign: 'center', fontWeight: 600, mb:2 }}>
                    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channelId}
                </Typography>
                {formError && <Alert severity="error" sx={{ mb: 2 }}>{formError}</Alert>}
                <Grid container spacing={2.5}>
                    <Grid item xs={12}>
                        <TextField
                            fullWidth
                            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–∞"
                            name="title"
                            value={contestDetails.title}
                            onChange={handleInputChange}
                            disabled={isLoading || isAiGenerating}
                            required
                            variant="outlined"
                            helperText="–ë—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω –∂–∏—Ä–Ω—ã–º –≤ Telegram."
                        />
                    </Grid>
                    <Grid item xs={12}>
                        <Box sx={{display: 'flex', alignItems: 'flex-start', gap: 1}}>
                            <TextField
                                fullWidth
                                label="–û–ø–∏—Å–∞–Ω–∏–µ –∏ —É—Å–ª–æ–≤–∏—è"
                                name="description"
                                value={contestDetails.description}
                                onChange={handleInputChange}
                                disabled={isLoading || isAiGenerating}
                                required
                                multiline
                                rows={5}
                                variant="outlined"
                                helperText="–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞, –ø—Ä–∞–≤–∏–ª–∞. Markdown –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
                            />
                            <Tooltip title="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Viht AI">
                                <span> {/* Span for Tooltip on disabled button */}
                                <IconButton 
                                    onClick={generateDescriptionWithAI} 
                                    disabled={isLoading || isAiGenerating || !contestDetails.title.trim()}
                                    color="primary"
                                    sx={{border: '1px solid', borderColor: 'primary.main', borderRadius: 1, mt:0.5}}
                                >
                                    {isAiGenerating ? <CircularProgress size={22} /> : <AutoAwesomeIcon />}
                                </IconButton>
                                </span>
                            </Tooltip>
                        </Box>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                        <TextField
                            fullWidth
                            label="–ü—Ä–∏–∑"
                            name="prize"
                            value={contestDetails.prize}
                            onChange={handleInputChange}
                            disabled={isLoading}
                            required
                            variant="outlined"
                            helperText="–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å?"
                        />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                        <TextField
                            fullWidth
                            label="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                            name="imageUrl"
                            type="url"
                            value={contestDetails.imageUrl || ''}
                            onChange={handleInputChange}
                            disabled={isLoading}
                            variant="outlined"
                            placeholder="https://example.com/image.png"
                        />
                    </Grid>
                     <Grid item xs={12} sm={6}>
                        <TextField
                            fullWidth
                            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (1-100)"
                            name="numberOfWinners"
                            type="number"
                            value={contestDetails.numberOfWinners || ''}
                            onChange={handleInputChange}
                            disabled={isLoading}
                            required
                            variant="outlined"
                            inputProps={{ min: 1, max: 100 }}
                            helperText="–ß–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100"
                        />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                        <TextField
                            fullWidth
                            label="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"
                            name="endDate"
                            type="datetime-local"
                            value={contestDetails.endDate || ''}
                            onChange={handleInputChange}
                            disabled={isLoading}
                            required
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            helperText="–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è"
                        />
                    </Grid>

                    <Grid item xs={12}>
                        <Typography variant="subtitle1" sx={{mt:1, mb:0.5, fontWeight: 500}}>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</Typography>
                        <Box sx={{pl:1}}>
                            <FormControlLabel
                                control={
                                    <Checkbox
                                        checked={contestDetails.conditions?.reactToPost || false}
                                        onChange={handleConditionChange}
                                        name="reactToPost"
                                        disabled={isLoading}
                                    />
                                }
                                label="–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–π –ø–æ—Å—Ç"
                            />
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 1}}>
                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={contestDetails.conditions?.subscribeChannelLink !== undefined}
                                            onChange={(e) => {
                                                const { checked } = e.target;
                                                setContestDetails(prev => ({
                                                    ...prev,
                                                    conditions: { ...prev.conditions, subscribeChannelLink: checked ? (prev.conditions?.subscribeChannelLink || '') : undefined }
                                                }));
                                            }}
                                            name="subscribeChannelCheckbox" 
                                            disabled={isLoading}
                                        />
                                    }
                                    label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:"
                                    sx={{mr:0, flexShrink:0}}
                                />
                                <TextField
                                    fullWidth
                                    variant="outlined"
                                    size="small"
                                    placeholder="@–∏–º—è_–∫–∞–Ω–∞–ª–∞ –∏–ª–∏ https://t.me/–∫–∞–Ω–∞–ª"
                                    name="subscribeChannelLink"
                                    value={contestDetails.conditions?.subscribeChannelLink || ''}
                                    onChange={handleConditionChange}
                                    disabled={isLoading || contestDetails.conditions?.subscribeChannelLink === undefined}
                                    required={contestDetails.conditions?.subscribeChannelLink !== undefined && !contestDetails.conditions?.subscribeChannelLink.trim()}
                                />
                            </Box>
                             <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 1}}>
                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={contestDetails.conditions?.joinGroupLink !== undefined}
                                            onChange={(e) => {
                                                const { checked } = e.target;
                                                setContestDetails(prev => ({
                                                    ...prev,
                                                    conditions: { ...prev.conditions, joinGroupLink: checked ? (prev.conditions?.joinGroupLink || '') : undefined }
                                                }));
                                            }}
                                            name="joinGroupCheckbox"
                                            disabled={isLoading}
                                        />
                                    }
                                    label="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É/—á–∞—Ç:"
                                    sx={{mr:0, flexShrink:0}}
                                />
                                <TextField
                                    fullWidth
                                    variant="outlined"
                                    size="small"
                                    placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É/—á–∞—Ç"
                                    name="joinGroupLink"
                                    value={contestDetails.conditions?.joinGroupLink || ''}
                                    onChange={handleConditionChange}
                                    disabled={isLoading || contestDetails.conditions?.joinGroupLink === undefined}
                                     required={contestDetails.conditions?.joinGroupLink !== undefined && !contestDetails.conditions?.joinGroupLink.trim()}
                                />
                            </Box>
                        </Box>
                    </Grid>
                    
                    <Grid item xs={12}>
                        <Typography variant="subtitle2" sx={{mt:1, mb:0.5, color: 'text.secondary'}}>–ö–Ω–æ–ø–∫–∞ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" (—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å):</Typography>
                    </Grid>
                    <Grid item xs={12}> {/* Button text now full width as URL is removed */}
                        <TextField
                            fullWidth
                            label="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–ø–æ —É–º–æ–ª—á. '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')"
                            name="buttonText"
                            value={contestDetails.buttonText || ''}
                            onChange={handleInputChange}
                            disabled={isLoading}
                            variant="outlined"
                            helperText="–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è."
                        />
                    </Grid>
                    {/* URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ */}

                    <Grid item xs={12} sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                         <Button
                            variant="outlined"
                            color="inherit"
                            onClick={onClose}
                            disabled={isLoading}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                            type="submit"
                            variant="contained"
                            color="primary"
                            disabled={isLoading || isAiGenerating}
                            startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : null}
                        >
                            {isLoading ? '–ü—É–±–ª–∏–∫–∞—Ü–∏—è...' : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
                        </Button>
                    </Grid>
                </Grid>
            </Paper>
        </Box>
    );
};
