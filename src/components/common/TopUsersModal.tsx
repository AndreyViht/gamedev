
import React, { useState, useEffect, useRef } from 'react';
import { supabase } from '../../api/clients';
import { TopUser } from '../../types';
import {
    Dialog, DialogTitle, DialogContent, DialogActions, Button, CircularProgress, Typography, Box,
    Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper
} from '@mui/material';

interface TopUsersModalProps {
  isOpen: boolean;
  onClose: () => void;
  currentUserVihtId?: string | null;
}

const TOP_USERS_LIMIT = 10;

export const TopUsersModal: React.FC<TopUsersModalProps> = ({ isOpen, onClose, currentUserVihtId }) => {
  const [topUsers, setTopUsers] = useState<TopUser[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const modalRef = useRef<HTMLDivElement>(null); // For Material UI Dialog, direct ref might not be needed for click outside

  useEffect(() => {
    const fetchTopUsers = async () => {
      if (!isOpen || !supabase) return;

      setIsLoading(true);
      setError(null);
      setTopUsers([]);

      try {
        const { data, error: rpcError } = await supabase.rpc('get_top_users_by_activity_points', {
          p_limit: TOP_USERS_LIMIT,
        });

        if (rpcError) {
          if (rpcError.message.toLowerCase().includes("function get_top_users_by_activity_points") && rpcError.message.toLowerCase().includes("does not exist")) {
            throw new Error('–§—É–Ω–∫—Ü–∏—è get_top_users_by_activity_points –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SQL-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω.');
          }
          throw rpcError;
        }
        
        const usersData = (Array.isArray(data) ? data : []) as TopUser[];
        setTopUsers(usersData);

      } catch (err: any) {
        setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      } finally {
        setIsLoading(false);
      }
    };

    if (isOpen) { 
        fetchTopUsers();
    }
  }, [isOpen]); 

  useEffect(() => {
    // Material UI Dialog handles click outside and escape key by default via onClose prop
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <Dialog 
        open={isOpen} 
        onClose={onClose} 
        maxWidth="sm" 
        fullWidth 
        PaperProps={{ 
            ref: modalRef, 
            className: "top-users-modal", // For potential global CSS overrides
            sx: { borderRadius: 'var(--border-radius-large)' } 
        }}
        aria-labelledby="top-users-modal-title"
    >
      <DialogTitle id="top-users-modal-title" sx={{textAlign: 'center', fontWeight: 600}}>
        üèÖ –¢–æ–ø {TOP_USERS_LIMIT} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ë–∞–ª–ª–∞–º –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      </DialogTitle>
      <DialogContent dividers>
        {isLoading && (
            <Box sx={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', p:3}}>
                <CircularProgress />
                <Typography sx={{mt:1}}>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–æ–≤...</Typography>
            </Box>
        )}
        {error && <Typography color="error" role="alert" sx={{p:2, textAlign: 'center'}}>{error}</Typography>}
        
        {!isLoading && !error && topUsers.length === 0 && (
          <Typography sx={{textAlign: 'center', p: 3}}>
            –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–æ–ø–µ. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!
          </Typography>
        )}

        {!isLoading && !error && topUsers.length > 0 && (
          <TableContainer component={Paper} elevation={0} className="top-users-list">
            <Table stickyHeader aria-label="—Ç–∞–±–ª–∏—Ü–∞ –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π">
              <TableHead>
                <TableRow>
                  <TableCell align="center" sx={{fontWeight: 'bold', width: '15%'}}>–†–∞–Ω–≥</TableCell>
                  <TableCell sx={{fontWeight: 'bold', width: '55%'}}>–ò–º—è</TableCell>
                  <TableCell align="right" sx={{fontWeight: 'bold', width: '30%'}}>–ë–∞–ª–ª—ã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚ú®</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {topUsers.map((user) => {
                  const pointsDisplay = user.activity_points?.toLocaleString() || 0;
                  return (
                    <TableRow 
                      key={user.rank} 
                      className={currentUserVihtId && user.user_viht_id === currentUserVihtId ? 'current-user-row' : ''}
                      sx={{
                          '&.current-user-row': {
                               backgroundColor: (theme) => theme.palette.action.hover, // MUI theme aware
                          },
                          '&:last-child td, &:last-child th': { border: 0 }
                      }}
                    >
                      <TableCell align="center" className="rank-cell">{user.rank}.</TableCell>
                      <TableCell className="name-cell" sx={{overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxWidth: '150px'}} title={user.display_name}>{user.display_name}</TableCell>
                      <TableCell align="right" className="points-cell">{pointsDisplay}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </TableContainer>
        )}
        <Typography variant="caption" sx={{fontSize: '0.8em', textAlign: 'center', mt: 2, display: 'block', color: 'text.secondary'}}>
            –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
        </Typography>
      </DialogContent>
      <DialogActions sx={{p: '16px 24px'}}>
        <Button onClick={onClose} color="primary">
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </DialogActions>
    </Dialog>
  );
};
